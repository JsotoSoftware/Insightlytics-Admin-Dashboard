name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main
      - staging

jobs:
  test:
    name: Run Unit & E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm run test --watch=false --browsers=ChromeHeadless

      - name: Run E2E Tests
        run: npm run e2e

  deploy:
    name: Deploy to DigitalOcean
    needs: test  # ✅ Deployment runs only if tests pass
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build --configuration=production

      - name: Determine Deployment Path
        run: |
          if [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "DEPLOY_PATH=${{ secrets.DEPLOY_PATH_STAGING }}" >> $GITHUB_ENV
            echo "DEPLOY_URL=${{ secrets.DEPLOY_URL_STAGING }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "DEPLOY_PATH=${{ secrets.DEPLOY_PATH }}" >> $GITHUB_ENV
            echo "DEPLOY_URL=${{ secrets.DEPLOY_URL }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          fi

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          echo "Testing SSH connection..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=accept-new ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} 'echo "SSH connection successful"'

      - name: Deploy to Droplet
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "dist/insightlytics-dashboard/browser/*"
          target: ${{ env.DEPLOY_PATH }}
          strip_components: 3
          timeout: "120s"
          command_timeout: "30m"
          debug: true
          proxy_timeout: "30s"
          use_insecure_cipher: false

      - name: Restart Caddy Server
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_IP }} << 'EOF'
            sudo systemctl reload caddy
            echo "✅ Caddy server restarted!"
          EOF

      - name: Verify Deployment
        run: |
          echo "Waiting for deployment to stabilize..."
          echo "Verifying ${{ env.ENVIRONMENT }} deployment..."
          sleep 15
          for i in {1..3}; do
            if curl --fail --silent --head ${{ env.DEPLOY_URL }}; then
              echo "✅ ${{ env.ENVIRONMENT }} deployment verified successfully!"
              exit 0
            fi
            echo "Attempt $i failed, retrying..."
            sleep 10
          done
          echo "❌ ${{ env.ENVIRONMENT }} deployment verification failed"
          exit 1
